# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

git_config: &git_config
  name: configure git bot
  command: |
    git config user.name "$GITHUB_BOT_USERNAME"
    git config user.email "$GITHUB_BOT_EMAIL"
    git remote set-url origin https://${GITHUB_BOT_TOKEN}@github.com/dialogs/api-schema.git

executors:
  java-executor:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      JVM_OPTS: -Xmx3200m
    working_directory: ~/code
  sbt-executor:
    docker:
      - image: circleci/openjdk:8-jdk
    resource_class: large
    environment:
      SBT_OPTS: -Xmx6g
      SCALA_VERSION: 2.13.1
    working_directory: ~/code/scala
  python-executor:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/code
  golang-executor:
    docker:
      - image: dialogs/go-tools-protoc:1.0.1
        environment:
          - GO111MODULE=on
    working_directory: /go/src/github.com/dialogs/api-schema

jobs:
  git-version-publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          <<: *git_config
      - run: npm ci
      - run:
          name: semantic release
          command: |
            export GH_TOKEN=$GITHUB_BOT_TOKEN
            export NPM_TOKEN=$NPM_AUTH_TOKEN
            export GIT_AUTHOR_NAME=$GITHUB_BOT_USERNAME
            export GIT_AUTHOR_EMAIL=$GITHUB_BOT_EMAIL
            export GIT_COMMITTER_NAME=$GITHUB_BOT_USERNAME
            export GIT_COMMITTER_EMAIL=$GITHUB_BOT_EMAIL
            npx semantic-release
      - run: git push --follow-tags

  docs-build:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install protobuf-compiler
            go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc
      - run:
          name: Generate documentation
          command: |
            mkdir -p docs
            protoc -I./proto -I./include --plugin=protoc-gen-doc="$GOPATH/bin/protoc-gen-doc" --doc_out=./docs --doc_opt=markdown,readme.md ./proto/*.proto
            protoc -I./proto -I./include --plugin=protoc-gen-doc="$GOPATH/bin/protoc-gen-doc" --doc_out=./docs --doc_opt=./proto/dlg_template.tmpl,index.html ./proto/*.proto
      - persist_to_workspace:
          root: .
          paths:
            - docs
  docs-publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          <<: *git_config
      - run:
          name: Deploy gh-pages
          command: npx gh-pages@2.0.1 -d docs
  java-build:
    executor: java-executor
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Build
          command: ./gradlew build
      - save_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
          paths:
            - ~/.gradle
  java-publish:
    executor: java-executor
    steps:
      - checkout
      - run:
          <<: *git_config
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Release
          command: echo -ne '\n\n' | ./gradlew bintrayUpload
  python-build:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: install dependencies
          command: python3 -m pip install --user grpcio grpcio-tools
      - run:
          name: build proto
          command: |
            mkdir -p dialog_api
            python3 -m grpc_tools.protoc \
                    -I`pwd`/proto \
                    -I`pwd`/include \
                    --python_out=`pwd`/dialog_api \
                    --grpc_python_out=`pwd`/dialog_api \
                    `pwd`/proto/*.proto \
                    `pwd`/include/scalapb/scalapb.proto
            sed -i 's/^\(import.*_pb2\)/from . \1/' dialog_api/*.py
            sed -i -e "s/from scalapb/from .scalapb/g" dialog_api/*.py
            touch dialog_api/__init__.py
            touch dialog_api/scalapb/__init__.py
      - persist_to_workspace:
          root: .
          paths:
            - dialog_api
  python-publish:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: configure pypi
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
      - run:
          name: install dependencies
          command: |
            python3 -m pip install --user twine
            python3 -m pip install --user --upgrade setuptools wheel
      - run:
          name: bundle dist
          command: python3 setup.py sdist bdist_wheel
      - run:
          name: publish
          command: python3 -m twine upload ./dist/*
  npm-build:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: npm ci
      - run: npm run prepare
  sbt-build:
    executor: sbt-executor
    steps:
      - checkout:
          path: ~/code
      - restore_cache:
          key: v1-sbt-cache-{{ checksum "build.sbt" }}
      - run: sbt compile
      - save_cache:
          key: v1-sbt-cache-{{ checksum "build.sbt" }}
          paths: ['~/.sbt', '~/.ivy2/cache', '~/.m2']
  sbt-publish:
    executor: sbt-executor
    steps:
      - checkout:
          path: ~/code
      - run: bash builder.sh
  golang-build:
    executor: golang-executor
    steps:
      - checkout
      - run:
          name: build proto
          command: |
            export SDK_DIR=/tmp/sdk
            rm -rf $SDK_DIR
            git clone -b master  https://github.com/salute-to-business-public/golang-bot-sdk $SDK_DIR
            rm -fv $SDK_DIR/*.go

            protoc \
            -I=proto \
            -I=include/ \
            --gogoslick_out=plugins=grpc,\
            Mgoogle/protobuf/any.proto=github.com/gogo/protobuf/types,\
            Mgoogle/protobuf/empty.proto=github.com/gogo/protobuf/types,\
            Mgoogle/protobuf/duration.proto=github.com/gogo/protobuf/types,\
            Mgoogle/protobuf/struct.proto=github.com/gogo/protobuf/types,\
            Mgoogle/protobuf/timestamp.proto=github.com/gogo/protobuf/types,\
            Mgoogle/protobuf/descriptor.proto=github.com/gogo/protobuf/protoc-gen-gogo/descriptor,\
            Mscalapb/scalapb.proto=github.com/gogo/protobuf/types,\
            Mgoogle/api/annotations.proto=google.golang.org/genproto/googleapis/api/annotations,\
            Mgoogle/protobuf/wrappers.proto=github.com/gogo/protobuf/types:\
            $SDK_DIR/ proto/*.proto
      - run: echo $(find proto -type f -print0 | sort -z | xargs -r0 sha1sum)  > CACHE_KEY1
      - run: cat CACHE_KEY1
      - save_cache:
          key: v1-golang-cache-{{ checksum "CACHE_KEY1" }}
          paths:
            - /tmp/sdk
  golang-publish:
    executor: golang-executor
    steps:
      - checkout
      - run: echo $(find proto -type f -print0 | sort -z | xargs -r0 sha1sum)  > CACHE_KEY1
      - run: cat CACHE_KEY1
      - restore_cache:
          key: v1-golang-cache-{{ checksum "CACHE_KEY1" }}
      - run:
          name: publish SDK
          command: |
            export TAG=$(git describe --tags --exact-match head~1)
            export COMMIT=$(git log --pretty=format:"%s (source commit: %H)")
            export TARGET=/tmp/new_sdk

            rm -rf $TARGET
            git clone -b master  https://github.com/salute-to-business-public/golang-bot-sdk $TARGET
            rm -fv $TARGET/*.go
            cp -v /tmp/sdk/*.go $TARGET/

            cd $TARGET
            git config user.name "$GITHUB_BOT_USERNAME"
            git config user.email "$GITHUB_BOT_EMAIL"
            git remote set-url origin https://${GITHUB_BOT_TOKEN}@github.com/dialogs/golang-dialog-api.git

            export CHANGES=$(git status -s)
            if [ -z "$CHANGES" ]; then
              echo "nothing to commit"
            else
              git add .
              echo $CHANGES
              git commit -m "$COMMIT"
              git push origin master
            fi

            if [ -z "$TAG" ]; then
              echo "tag is empty"
            else
              git tag $TAG
              git push origin --tags
            fi
  swagger-build:
    executor: golang-executor
    steps:
      - checkout
      - run:
          name: build proto
          command: |
            export SWAGGER_DIR=swagger
            rm -rf $SWAGGER_DIR
            mkdir -p $SWAGGER_DIR
            rm -rf /go/src/github.com/grpc-ecosystem/grpc-gateway
            mkdir -p /go/src/github.com/grpc-ecosystem/grpc-gateway
            git clone -b v1.12.2 https://github.com/grpc-ecosystem/grpc-gateway /go/src/github.com/grpc-ecosystem/grpc-gateway
            go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
            protoc \
            -I=proto \
            -I=include/ \
            -I=/go/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
            --swagger_out=logtostderr=true:\
            $SWAGGER_DIR proto/*.proto

workflows:
  version: 2
  build:
    jobs:
      - npm-build
      - sbt-build
      - docs-build
      - java-build
      - python-build
      - golang-build
      - swagger-build
      - golang-publish:
          requires:
            - golang-build
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - git-version-publish:
          requires:
            - npm-build
            - sbt-build
            - docs-build
            - java-build
            - python-build
            - golang-build
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master

  publish:
    jobs:
      - npm-build:
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - sbt-build:
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - sbt-publish:
          requires:
            - sbt-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - java-build:
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - java-publish:
          requires:
            - java-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - python-build:
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - python-publish:
          requires:
            - python-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - docs-build:
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - docs-publish:
          requires:
            - docs-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - golang-build:
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - golang-publish:
          requires:
            - golang-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
